[buildout]
#-----------------------------------------------------------------------------------------------
# install development eggs from source:
# the following script tells buildout to build the source code in the following folders
# into develop-eggs, which can be imported in the program.
#
#
# NOTE: This version does NOT build pcfitsio and dependencies
#-----------------------------------------------------------------------------------------------
develop =
	src/pcc
	src/ngams
	src/ngamsLib
	src/ngamsPlugIns
	src/ngamsServer
	src/ngamsPClient
	src/ngamsTest
	src/ngasUtils
	src/nonPyInstaller
	src/minitage.recipe.cmmidev-1.51

#------------------------------------------------------------------------------------------------
# [python] part is to generate a python interpreter with all modules on sys.path
# it will be put into bin directory to excute code in the program and test modules to be imported;
#
# [ngamsServer] is to define the entry point of the ngamsServer and generate a script in bin;
#
# [ngamsCacheServer] is to define the entry point of the ngamsCacheServer and generate a script in bin;
#
# [ngamsDaemon] is to define the entry point of the ngamsDaemon and generate a script in bin;
#
# [ngamsPClient] defines the entry point of ngamsPClient and generates a script in bin;
#
# [ngamsTest] defines the entry point of ngams system test and generates a script in bin;
#
# [sqlite] is to install sqlite with config, make & make install;
#
# [chksum] installs chksum library;
#
# [cjclient] compiles and installs c & java clients and tests;
#
#------------------------------------------------------------------------------------------------
parts =
	python
	ngamsServer
	ngamsCacheServer
	ngamsDaemon
	ngamsPClient
	ngamsTest
    sqlite
#    chksum
    cjclient

#------------------------------------------------------------------------------------------------
# This part declare eggs to be used/imported in the program, including eggs from
# cheese shop and develop eggs.
#------------------------------------------------------------------------------------------------
eggs=
	minitage.recipe.egg
	minitage.recipe.cmmi
	minitage.recipe.du
	minitage.recipe.scripts
	ipython
#	bsddb3
	egenix-mx-base
	pcc
	ngams
	ngamsLib
	ngamsPlugIns
	ngamsServer
	ngamsPClient
	ngamsTest
	ngasUtils

#------------------------------------------------------------------------------------------------
# [python] part is to generate a python interpreter with all modules on sys.path
#          it will be put into bin directory to excute code in the program and test modules to be imported.
#
# recipe: Recipe for installing Python package distributions as egg. Here we only use interpreter
#         to generate a python interpreter.
#
# interpreter: Tell the recipe to generate an interpreter and name it as python.
#
# extra-path: Tell the recipe to add the folling paths on sys.path (in front of existing paths).
#
# eggs: Tell the recipe the eggs that are to be used by the interpreter. The paths for these eggs
#       will be put onto sys.path (in front of existing paths).
#------------------------------------------------------------------------------------------------
[python]
recipe=zc.recipe.egg
interpreter=python
extra-paths=
    ${buildout:directory}/lib/python
    ${buildout:directory}/src/ngasUtils/src
    ${buildout:directory}/src
eggs=${buildout:eggs}

#------------------------------------------------------------------------------------------------
# [ngamsServer] is to define the entry point of the ngamsServer and generate a script in bin.
#
# recipe: Recipe for installing Python package distributions as egg and generate a script for the
#         entry point.
#
# entry-points: Define the entry point (the file and the name of the entry method/function).
#
# extra-path: Tell the recipe to add the folling paths on sys.path (in front of existing paths).
#
# eggs: Tell the recipe the eggs that are to be used by the program. The paths for these eggs
#       will be put onto sys.path (in front of existing paths).
#------------------------------------------------------------------------------------------------
[ngamsServer]
recipe=zc.recipe.egg:script
extra-paths=
    ${buildout:directory}/lib/python
    ${buildout:directory}/src/ngasUtils/src
    ${buildout:directory}/src
entry-points=ngamsServer=ngamsServer:main
eggs=
	${buildout:eggs}

#------------------------------------------------------------------------------------------------
# [ngamsCacheServer] is to define the entry point of the ngamsServer and generate a script in bin.
#
# recipe: Recipe for installing Python package distributions as egg and generate a script for the
#         entry point.
#
# entry-points: Define the entry point (the file and the name of the entry method/function).
#
# extra-path: Tell the recipe to add the folling paths on sys.path (in front of existing paths).
#
# eggs: Tell the recipe the eggs that are to be used by the program. The paths for these eggs
#       will be put onto sys.path (in front of existing paths).
#------------------------------------------------------------------------------------------------
[ngamsCacheServer]
recipe=zc.recipe.egg:script
extra-paths=
    ${buildout:directory}/lib/python
    ${buildout:directory}/src/ngasUtils/src
    ${buildout:directory}/src
entry-points=ngamsCacheServer=ngamsCacheServer:main
eggs=
	${buildout:eggs}

#------------------------------------------------------------------------------------------------
# [ngamsDaemon] is to define the entry point of the ngamsDaemon and generate a script in bin.
#
# recipe: Recipe for installing Python package distributions as egg and generate a script for the
#         entry point.
#
# entry-points: Define the entry point (the file and the name of the entry method/function).
#
# extra-path: Tell the recipe to add the folling paths on sys.path (in front of existing paths).
#
# eggs: Tell the recipe the eggs that are to be used by the program. The paths for these eggs
#       will be put onto sys.path (in front of existing paths).
#------------------------------------------------------------------------------------------------
[ngamsDaemon]
recipe=zc.recipe.egg:script
extra-paths=
    ${buildout:directory}/lib/python
    ${buildout:directory}/src/ngamsStartup
    ${buildout:directory}/src
entry-points=ngamsDaemon=ngamsDaemon:main
eggs=
	${buildout:eggs}

#------------------------------------------------------------------------------------------------
# [ngamsPClient] defines the entry point of ngamsPClient and generates a script in bin;
#
# recipe: Recipe for installing Python package distributions as egg and generate a script for the
#         entry point.
#
# entry-points: Define the entry point (the file and the name of the entry method/function).
#
# extra-path: Tell the recipe to add the folling paths on sys.path (in front of existing paths).
#
# eggs: Tell the recipe the eggs that are to be used by the program. The paths for these eggs
#       will be put onto sys.path (in front of existing paths).
#------------------------------------------------------------------------------------------------
[ngamsPClient]
recipe=zc.recipe.egg:script
entry-points=ngamsPClient=ngamsPClient:main
extra-paths=
    ${buildout:directory}/lib/python
    ${buildout:directory}/src/ngasUtils/src
    ${buildout:directory}/src
eggs=
	${buildout:eggs}

#------------------------------------------------------------------------------------------------
# [ngamsTest] defines the entry point of ngams system test and generates a script in bin;
#
# recipe: Recipe for installing Python package distributions as egg and generate a script for the
#         entry point.
#
# entry-points: Define the entry point (the file and the name of the entry method/function).
#
# extra-path: Tell the recipe to add the folling paths on sys.path (in front of existing paths).
#
# eggs: Tell the recipe the eggs that are to be used by the program. The paths for these eggs
#       will be put onto sys.path (in front of existing paths).
#------------------------------------------------------------------------------------------------
[ngamsTest]
recipe=zc.recipe.egg:script
entry-points=ngamsTest=ngamsTest:main
extra-paths=
    ${buildout:directory}/lib/python
    ${buildout:directory}/src/ngasUtils/src
    ${buildout:directory}/src
eggs=
	${buildout:eggs}

#------------------------------------------------------------------------------------------------
# [sqlite] is to install sqlite with config, make & make install;
#
# recipe: recipe for configure-make-make-install distributions of softwares.
#
# url: the path for the installation tar files
#
# *hooks: the messages that will be given during installation (defined in files specified).
#
# prefix: installation directory (for "configure --prefix=")
#
# install-in-place: do NOT clean the installtion directory before installation. Otherwise
#                   original files in the directory will be removed.
#------------------------------------------------------------------------------------------------
[sqlite]
recipe=minitage.recipe.cmmi
url=file://${buildout:directory}/clib_tars/sqlite-autoconf-3070400.tar.gz
pre-unpack-hook     = ${buildout:directory}/hooks/sqlite_hook.py:pre_unpack_hook
post-unpack-hook    = ${buildout:directory}/hooks/sqlite_hook.py:post_unpack_hook
pre-configure-hook  = ${buildout:directory}/hooks/sqlite_hook.py:pre_configure_hook
pre-make-hook       = ${buildout:directory}/hooks/sqlite_hook.py:pre_make_hook
post-build-hook     = ${buildout:directory}/hooks/sqlite_hook.py:post_build_hook
post-make-hook      = ${buildout:directory}/hooks/sqlite_hook.py:post_make_hook
prefix=${buildout:directory}
install-in-place=True
#------------------------------------------------------------------------------------------------
# [chksum] installs chksum library;
#
# recipe: recipe for configure-make-make-install distributions of softwares.
#
# url: the path for the installation tar files
#
# *hooks: the messages that will be given during installation (defined in files specified).
#
# inner-dir: go into a inner directory before running configure-make-make-install.
#
# environment: environment variables to be set before installtion.
#
# noconfigure: do NOT run configure.
#
# install-in-place: do NOT clean the installtion directory before installation. Otherwise
#                   original files in the directory will be removed.
#------------------------------------------------------------------------------------------------
[chksum]
recipe=minitage.recipe.cmmi
url=file://${buildout:directory}/clib_tars/chksum.tar.gz
pre-unpack-hook     = ${buildout:directory}/hooks/chksum_hook.py:pre_unpack_hook
post-unpack-hook    = ${buildout:directory}/hooks/chksum_hook.py:post_unpack_hook
pre-configure-hook  = ${buildout:directory}/hooks/chksum_hook.py:pre_configure_hook
pre-make-hook       = ${buildout:directory}/hooks/chksum_hook.py:pre_make_hook
post-build-hook     = ${buildout:directory}/hooks/chksum_hook.py:post_build_hook
post-make-hook      = ${buildout:directory}/hooks/chksum_hook.py:post_make_hook
inner-dir=chksum/src
environment=
    INSTROOT=${buildout:directory}
noconfigure=true
install-in-place=True

#------------------------------------------------------------------------------------------------
# [cjclient] compiles and installs c & java clients and tests.
#
# recipe: recipe for configure-make-make-install distributions of softwares. Modified by Frank Yi TAN.
#         add options to keep original installation directories and pre-exe-cmd.
#
# *hooks: the messages that will be given during installation (defined in files specified).
#
# prefix: installation directory (for "configure --prefix=")
#
# install-in-place: do NOT clean the installtion directory before installation. Otherwise
#                   original files in the directory will be removed.
#
# keep-build-dir: do NOT remove the installation directories.
#------------------------------------------------------------------------------------------------
[cjclient]
recipe=minitage.recipe.cmmidev
url=file://${buildout:directory}/clib_tars/chksum.tar.gz
#build-dir=${buildout:directory}/src
inner-dir=../src
pre-exe-cmd=sh ./bootstrap
pre-unpack-hook     = ${buildout:directory}/hooks/cjclient_hook.py:pre_unpack_hook
post-unpack-hook    = ${buildout:directory}/hooks/cjclient_hook.py:post_unpack_hook
pre-configure-hook  = ${buildout:directory}/hooks/cjclient_hook.py:pre_configure_hook
pre-make-hook       = ${buildout:directory}/hooks/cjclient_hook.py:pre_make_hook
post-build-hook     = ${buildout:directory}/hooks/cjclient_hook.py:post_build_hook
post-make-hook      = ${buildout:directory}/hooks/cjclient_hook.py:post_make_hook
prefix=${buildout:directory}
install-in-place=True
keep-build-dir=True

[bsddb3]
recipe=zc.recipe.egg:script
extra-paths=
    ${buildout:directory}
eggs=
	${buildout:eggs}


