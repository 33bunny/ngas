/*
 * FILE : pcfitsio_wrap.c
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/***********************************************************************
 * $Header: /Users/npirzkal/CVS/pfitsio/pcfitsio_wrap.c,v 1.19 2004/07/06 20:33:57 npirzkal Exp $
 * swig_lib/python/python.cfg
 *
 * This file contains coded needed to add variable linking to the
 * Python interpreter.   C variables are added as a new kind of Python
 * datatype.
 *
 * Also contains supporting code for building python under Windows
 * and things like that.
 *
 * $Log: pcfitsio_wrap.c,v $
 * Revision 1.19  2004/07/06 20:33:57  npirzkal
 * fix for numarray 1.0
 *
 * Revision 1.18  2004/06/11 13:56:32  npirzkal
 * Removed numeric include line, fixed warning message when creating a new FITS file
 *
 ************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif
#include "Python.h"
#include "numarray/libnumarray.h"
#ifdef __cplusplus
}
#endif

/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

typedef struct {
  char  *name;
  PyObject *(*get_attr)(void);
  int (*set_attr)(PyObject *);
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar **vars;
  int      nvars;
  int      maxvars;
} swig_varlinkobject;

/* ----------------------------------------------------------------------
   swig_varlink_repr()

   Function for python repr method
   ---------------------------------------------------------------------- */

static PyObject *
swig_varlink_repr(swig_varlinkobject *v)
{
  v = v;
  return PyString_FromString("<Global variables>");
}

/* ---------------------------------------------------------------------
   swig_varlink_print()

   Print out all of the global variable names
   --------------------------------------------------------------------- */

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags)
{

  int i = 0;
  flags = flags;
  fprintf(fp,"Global variables { ");
  while (v->vars[i]) {
    fprintf(fp,"%s", v->vars[i]->name);
    i++;
    if (v->vars[i]) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

/* --------------------------------------------------------------------
   swig_varlink_getattr
 
   This function gets the value of a variable and returns it as a
   PyObject.   In our case, we'll be looking at the datatype and
   converting into a number or string
   -------------------------------------------------------------------- */

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n)
{
  int i = 0;
  char temp[128];

  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->get_attr)();
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return NULL;
}

/* -------------------------------------------------------------------
   swig_varlink_setattr()

   This function sets the value of a variable.
   ------------------------------------------------------------------- */

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p)
{
  char temp[128];
  int i = 0;
  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->set_attr)(p);
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return 1;
}

statichere PyTypeObject varlinktype = {
/*  PyObject_HEAD_INIT(&PyType_Type)  Note : This doesn't work on some machines */
  PyObject_HEAD_INIT(0)              
  0,
  "varlink",                          /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */

SWIGSTATIC PyObject *
SWIG_newvarlink(void)
{
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  /*  _Py_NewReference(result);  Does not seem to be necessary */
  result->nvars = 0;
  result->maxvars = 64;
  result->vars = (swig_globalvar **) malloc(64*sizeof(swig_globalvar *));
  result->vars[0] = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGSTATIC void
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p))
{
  swig_varlinkobject *v;
  v= (swig_varlinkobject *) p;
	
  if (v->nvars >= v->maxvars -1) {
    v->maxvars = 2*v->maxvars;
    v->vars = (swig_globalvar **) realloc(v->vars,v->maxvars*sizeof(swig_globalvar *));
    if (v->vars == NULL) {
      fprintf(stderr,"SWIG : Fatal error in initializing Python module.\n");
      exit(1);
    }
  }
  v->vars[v->nvars] = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  v->vars[v->nvars]->name = (char *) malloc(strlen(name)+1);
  strcpy(v->vars[v->nvars]->name,name);
  v->vars[v->nvars]->get_attr = get_attr;
  v->vars[v->nvars]->set_attr = set_attr;
  v->nvars++;
  v->vars[v->nvars] = 0;
}



/*****************************************************************************
 * $Header: /Users/npirzkal/CVS/pfitsio/pcfitsio_wrap.c,v 1.19 2004/07/06 20:33:57 npirzkal Exp $
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strcpy(temp_type,tp->name);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#define SWIG_init    initpcfitsio

#define SWIG_name    "pcfitsio"

#include "fitsio.h"
#include "pcfitsio.h"

static PyObject* l_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
   /* PyObject*   o3;*/
    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyList_Check(target)) {
            o2 = target;
            target = PyList_New(0);
            PyList_Append(target, o2);
	    Py_XDECREF(o2);
        }
        PyList_Append(target,o);
	Py_XDECREF(o);
    }
    return target;
}

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyTuple_Check(target)) {
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}
static PyObject *_wrap_fits_open_file(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _result;
    char * _arg0;
    int  _arg1;
    int * _arg2;
    PyObject * _obj0 = 0;
    char _ptemp[128];
int _arg2t;

    self = self;
{
	_arg0=NULL;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"Oi:fits_open_file",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyString_Check(_obj0)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg0=PyString_AsString(_obj0);
}
    _result = (fitsfile *)nfopen(_arg0,_arg1,_arg2);
    SWIG_MakePtr(_ptemp, (char *) _result,"_fitsfile_p");
    _resultobj = Py_BuildValue("s",_ptemp);
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_reopen_file(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _result;
    fitsfile * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:fits_reopen_file",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_reopen_file. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (fitsfile *)nfreopen(_arg0);
    SWIG_MakePtr(_ptemp, (char *) _result,"_fitsfile_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_fits_create_file(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _result;
    char * _arg0;
    int * _arg1;
    PyObject * _obj0 = 0;
    char _ptemp[128];
int _arg1t;
    self = self;
{
	_arg0=NULL;
}
  _arg1t=0;
  _arg1=&_arg1t;
    if(!PyArg_ParseTuple(args,"O:fits_create_file",&_obj0)) 
        return NULL;
{
	if (!PyString_Check(_obj0)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg0=PyString_AsString(_obj0);
}
    _result = (fitsfile *)nfinit(_arg0,_arg1);
    SWIG_MakePtr(_ptemp, (char *) _result,"_fitsfile_p");
    _resultobj = Py_BuildValue("s",_ptemp);
{
	char str[255];

	if(*_arg1!=0) {
		ffgerr(*_arg1,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg1 >= 100) && (*_arg1 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg1 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_create_template(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _result;
    char * _arg0;
    char * _arg1;
    PyObject * _obj0 = 0;
    char _ptemp[128];

    self = self;
{
	_arg0=NULL;
}
    if(!PyArg_ParseTuple(args,"Os:fits_create_template",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyString_Check(_obj0)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg0=PyString_AsString(_obj0);
}
    _result = (fitsfile *)nftplt(_arg0,_arg1);
    SWIG_MakePtr(_ptemp, (char *) _result,"_fitsfile_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_fits_open_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _result;
    fitsfile * _arg0;
    int  _arg1;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"si:fits_open_group",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_open_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (fitsfile *)nffgtop(_arg0,_arg1);
    SWIG_MakePtr(_ptemp, (char *) _result,"_fitsfile_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_fits_open_member(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _result;
    fitsfile * _arg0;
    long  _arg1;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"sl:fits_open_member",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_open_member. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (fitsfile *)nffgmop(_arg0,_arg1);
    SWIG_MakePtr(_ptemp, (char *) _result,"_fitsfile_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_fits_close_file(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    char * _argc0 = 0;
int _arg1t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
    if(!PyArg_ParseTuple(args,"s:fits_close_file",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_close_file. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_close_file(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg1!=0) {
		ffgerr(*_arg1,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg1 >= 100) && (*_arg1 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg1 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_delete_file(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    char * _argc0 = 0;
int _arg1t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
    if(!PyArg_ParseTuple(args,"s:fits_delete_file",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_delete_file. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_delete_file(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg1!=0) {
		ffgerr(*_arg1,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg1 >= 100) && (*_arg1 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg1 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_file_name(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int * _arg2;
    char * _argc0 = 0;
        char _arg1t[FLEN_CARD];
	int _arg2t;

    self = self;
	_arg1 = _arg1t;
 	_arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"s:fits_file_name",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_file_name. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_file_name(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;

	o = PyString_FromString(_arg1);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_file_mode(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    int * _arg2;
    char * _argc0 = 0;
int _arg1t;
int _arg2t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"s:fits_file_mode",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_file_mode. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_file_mode(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_hdrspace(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    int * _arg2;
    int * _arg3;
    char * _argc0 = 0;
int _arg1t;
int _arg2t;
int _arg3t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"s:fits_get_hdrspace",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_hdrspace. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_hdrspace(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_hdrpos(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    int * _arg2;
    int * _arg3;
    char * _argc0 = 0;
int _arg1t;
int _arg2t;
int _arg3t;

    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"s:fits_get_hdrpos",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_hdrpos. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_hdrpos(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_keyword(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
        char _arg2t[FLEN_CARD];
        char _arg3t[FLEN_CARD];
    char * _arg3;
    int * _arg4;
int _arg4t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
	_arg1=NULL;
	_arg2 = _arg2t;
	_arg3 = _arg3t;
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sO:fits_read_keyword",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_keyword. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
/* printf(":%s:\n",_arg1) */;
}
    fits_read_keyword(_arg0,_arg1,_arg2,_arg3,_arg4);
/*
	printf("arg1:%s\n",_arg1);
        printf("arg2:%s\n",_arg2);
        printf("arg3:%s\n",_arg3);
*/

    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;

	o = PyString_FromString(_arg2);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg3);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_key_log(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int * _arg2;
    char * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
char _arg3t[FLEN_CARD];
int _arg4t;
    self = self;
{
	_arg1=NULL;
}
  _arg2t=0;
  _arg2=&_arg2t;
	_arg3 = _arg3t;
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sO:fits_read_key_log",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_key_log. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_read_key_log(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg3);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_key_dbl(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    double * _arg2;
    char * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
double _arg2t;
char _arg3t[FLEN_CARD];
int _arg4t;
    self = self;
{
	_arg1=NULL;
}
	_arg2t=0;
	_arg2=&_arg2t;
	_arg3 = _arg3t;
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sO:fits_read_key_dbl",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_key_dbl. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_read_key_dbl(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg2;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg3);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_key_lng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    long * _arg2;
    char * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
long _arg2t;
char _arg3t[FLEN_CARD];
int _arg4t;
    self = self;
{
	_arg1=NULL;
}
	_arg2t=0;
	_arg2=&_arg2t;
	_arg3 = _arg3t;
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sO:fits_read_key_lng",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_key_lng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_read_key_lng(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg3);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_movabs_key(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
    self = self;
{
	_arg1=0;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"sO:fits_movabs_key",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_movabs_key. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_movabs_key(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_movrel_key(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
    self = self;
{
	_arg1=0;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"sO:fits_movrel_key",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_movrel_key. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_movrel_key(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_version(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    float  _result;
    float * _arg0;
float _arg0t;
    self = self;
	_arg0t=0.;
	_arg0=&_arg0t;
    if(!PyArg_ParseTuple(args,":fits_get_version")) 
        return NULL;
    _result = (float )fits_get_version(_arg0);
    _resultobj = Py_BuildValue("f",_result);
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg0;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_errstatus(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _arg0;
    char * _arg1;
    PyObject * _obj0 = 0;
char _arg1t[FLEN_CARD];
    self = self;
{
	_arg0=0;
}
	_arg1 = _arg1t;
    if(!PyArg_ParseTuple(args,"O:fits_get_errstatus",&_obj0)) 
        return NULL;
{
	if (!PyInt_Check(_obj0)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg0 = PyInt_AsLong(_obj0);
}
    fits_get_errstatus(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;

	o = PyString_FromString(_arg1);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_errmsg(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    char * _arg0;
    PyObject * _obj0 = 0;

    self = self;
{
	_arg0=NULL;
}
    if(!PyArg_ParseTuple(args,"O:fits_write_errmsg",&_obj0)) 
        return NULL;
{
	if (!PyString_Check(_obj0)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg0=PyString_AsString(_obj0);
}
    fits_write_errmsg(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_fits_read_errmsg(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    char * _arg0;
	char _arg0t[FLEN_CARD];
    self = self;
	_arg0 = _arg0t;
    if(!PyArg_ParseTuple(args,":fits_read_errmsg")) 
        return NULL;
    fits_read_errmsg(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;

	o = PyString_FromString(_arg0);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_clear_errmsg(PyObject *self, PyObject *args) {
    PyObject * _resultobj;

    self = self;
    if(!PyArg_ParseTuple(args,":fits_clear_errmsg")) 
        return NULL;
    fits_clear_errmsg();
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_fits_update_key(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1=0;
    int * voidtypeptr;
    char * _arg2;
    void * _arg3;
    char * _arg4;
    int * _arg5;
    char * _argc0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
int _arg5t;
    self = self;
{
	voidtypeptr = &_arg1;
}
{
	_arg2=NULL;
}
{
	_arg3=NULL;
}
{
	_arg4=NULL;
}
  _arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sOOO:fits_update_key",&_argc0,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_update_key. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
{
	long *ltmp;
	double *dtmp;
	
	if(PyInt_Check(_obj3)) {
		ltmp = calloc(1,sizeof(long));
		if (ltmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 31;
		*ltmp=PyInt_AsLong(_obj3);
		_arg3 = (void *)ltmp;
		/*free(ltmp);*/
	}
	if(PyFloat_Check(_obj3)) {
		dtmp = calloc(1,sizeof(double));
		if (dtmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 82;
		*dtmp=PyFloat_AsDouble(_obj3);
		_arg3 = (void *)dtmp;
		/*free(dtmp);*/
	}
	if(PyString_Check(_obj3)) {
		*voidtypeptr = 16;
		_arg3=(void *)PyString_AsString(_obj3);
	}

	if (!PyInt_Check(_obj3) && !PyFloat_Check(_obj3) && !PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int, Float, or String expected"),0));
	}

}
    if (_obj4)
{
	if (!PyString_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg4=PyString_AsString(_obj4);
}
    fits_update_key(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_update_key_null(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sOs:fits_update_key_null",&_argc0,&_obj1,&_arg2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_update_key_null. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_update_key_null(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_comment(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
    self = self;
{
	_arg1=NULL;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"sO:fits_write_comment",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_comment. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_write_comment(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_history(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
    self = self;
{
	_arg1=NULL;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"sO:fits_write_history",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_history. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_write_history(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_date(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    char * _argc0 = 0;
int _arg1t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
    if(!PyArg_ParseTuple(args,"s:fits_write_date",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_date. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_write_date(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg1!=0) {
		ffgerr(*_arg1,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg1 >= 100) && (*_arg1 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg1 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_record(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
    self = self;
{
	_arg1=NULL;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"sO:fits_write_record",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_record. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_write_record(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_key_unit(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg2=NULL;
}
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sOO:fits_write_key_unit",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_key_unit. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
    fits_write_key_unit(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_record(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
char _arg2t[FLEN_CARD];
int _arg3t;
    self = self;
{
	_arg1=0;
}
	_arg2 = _arg2t;
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sO:fits_read_record",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_record. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_read_record(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;

	o = PyString_FromString(_arg2);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_card(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
char _arg2t[FLEN_CARD];
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
	_arg2 = _arg2t;
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sO:fits_read_card",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_card. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_read_card(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;

	o = PyString_FromString(_arg2);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_key_unit(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    char * _result;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
char _arg2t[FLEN_CARD];
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
	_arg2 = _arg2t;
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sO:fits_read_key_unit",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_key_unit. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    _result = (char *)fits_read_key_unit(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("s", _result);
{
	PyObject *o;

	o = PyString_FromString(_arg2);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_key(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1=0;
    int * voidtypeptr;
    char * _arg2;
    void * _arg3;
    char * _arg4;
    int * _arg5;
    char * _argc0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
int _arg5t;
    self = self;
{
	voidtypeptr = &_arg1;
}
{
	_arg2=NULL;
}
{
	_arg3=NULL;
}
{
	_arg4=NULL;
}
  _arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sOOO:fits_write_key",&_argc0,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_key. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
{
	long *ltmp;
	double *dtmp;
	
	if(PyInt_Check(_obj3)) {
		ltmp = calloc(1,sizeof(long));
		if (ltmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 31;
		*ltmp=PyInt_AsLong(_obj3);
		_arg3 = (void *)ltmp;
		/*free(ltmp);*/
	}
	if(PyFloat_Check(_obj3)) {
		dtmp = calloc(1,sizeof(double));
		if (dtmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 82;
		*dtmp=PyFloat_AsDouble(_obj3);
		_arg3 = (void *)dtmp;
		/*free(dtmp);*/
	}
	if(PyString_Check(_obj3)) {
		*voidtypeptr = 16;
		_arg3=(void *)PyString_AsString(_obj3);
	}

	if (!PyInt_Check(_obj3) && !PyFloat_Check(_obj3) && !PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int, Float, or String expected"),0));
	}

}
    if (_obj4)
{
	if (!PyString_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg4=PyString_AsString(_obj4);
}
    fits_write_key(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_update_card(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg2=NULL;
}
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sOO:fits_update_card",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_update_card. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
    fits_update_card(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_modify_name(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg2=NULL;
}
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sOO:fits_modify_name",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_modify_name. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
    fits_modify_name(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_modify_comment(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg2=NULL;
}
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sOO:fits_modify_comment",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_modify_comment. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
    fits_modify_comment(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_modify_key_null(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
int _arg3t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg2=NULL;
}
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sOO:fits_modify_key_null",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_modify_key_null. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
    fits_modify_key_null(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_modify_key_str(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    char * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
int _arg4t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg2=NULL;
}
{
	_arg3=NULL;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOOO:fits_modify_key_str",&_argc0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_modify_key_str. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
{
	if (!PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg3=PyString_AsString(_obj3);
}
    fits_modify_key_str(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_modify_key_log(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int  _arg2;
    char * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
int _arg4t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg3=NULL;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOiO:fits_modify_key_log",&_argc0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_modify_key_log. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg3=PyString_AsString(_obj3);
}
    fits_modify_key_log(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_modify_key_lng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    long  _arg2;
    char * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
int _arg4t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg3=NULL;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOlO:fits_modify_key_lng",&_argc0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_modify_key_lng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg3=PyString_AsString(_obj3);
}
    fits_modify_key_lng(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_key_longstr(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    char * _arg2;
    char * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
int _arg4t;
    self = self;
{
	_arg1=NULL;
}
{
	_arg2=NULL;
}
{
	_arg3=NULL;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOOO:fits_write_key_longstr",&_argc0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_key_longstr. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
{
	if (!PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg3=PyString_AsString(_obj3);
}
    fits_write_key_longstr(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_delete_key(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
    self = self;
{
	_arg1=NULL;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"sO:fits_delete_key",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_delete_key. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
    fits_delete_key(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_delete_record(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
    self = self;
{
	_arg1=0;
}
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"sO:fits_delete_record",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_delete_record. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_delete_record(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_hdu_num(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    char * _argc0 = 0;
int _arg1t;

    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
    if(!PyArg_ParseTuple(args,"s:fits_get_hdu_num",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_hdu_num. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_hdu_num(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_hdu_type(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    int * _arg2;
    char * _argc0 = 0;
int _arg1t;
int _arg2t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"s:fits_get_hdu_type",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_hdu_type. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_hdu_type(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_hduaddr(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    long * _arg1;
    long * _arg2;
    long * _arg3;
    int * _arg4;
    char * _argc0 = 0;
long _arg1t;
long _arg2t;
long _arg3t;
int _arg4t;
    self = self;
	_arg1t=0;
	_arg1=&_arg1t;
	_arg2t=0;
	_arg2=&_arg2t;
	_arg3t=0;
	_arg3=&_arg3t;
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"s:fits_get_hduaddr",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_hduaddr. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_hduaddr(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg3;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_movabs_hdu(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
int _arg3t;
    self = self;
{
	_arg1=0;
}
  _arg2t=0;
  _arg2=&_arg2t;
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sO:fits_movabs_hdu",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_movabs_hdu. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_movabs_hdu(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_movrel_hdu(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
int _arg3t;
    self = self;
{
	_arg1=0;
}
  _arg2t=0;
  _arg2=&_arg2t;
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sO:fits_movrel_hdu",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_movrel_hdu. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_movrel_hdu(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_movnam_hdu(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
    int  _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
int _arg4t;
    self = self;
{
	_arg1=0;
}
{
	_arg2=NULL;
}
{
	_arg3=0;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOOO:fits_movnam_hdu",&_argc0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_movnam_hdu. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    fits_movnam_hdu(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_num_hdus(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    int * _arg2;
    char * _argc0 = 0;
int _arg1t;
int _arg2t;

    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"s:fits_get_num_hdus",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_num_hdus. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_num_hdus(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_create_hdu(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    char * _argc0 = 0;
int _arg1t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
    if(!PyArg_ParseTuple(args,"s:fits_create_hdu",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_create_hdu. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_create_hdu(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg1!=0) {
		ffgerr(*_arg1,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg1 >= 100) && (*_arg1 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg1 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_create_img(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int  _arg2=0;
    int * sizeptr;
    long * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
int _arg4t;

    self = self;
{
	_arg1=0;
}
{
	sizeptr = &_arg2;
}
{
	_arg3=NULL;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOO:fits_create_img",&_argc0,&_obj1,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_create_img. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    if (_obj3)
{
	long i,size=0;

	if (PyList_Check(_obj3)) {
		size = PyList_Size(_obj3);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg3 = (long *) calloc(size,sizeof(long));
	if (_arg3 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg3[i]= (long) PyInt_AsLong(PyList_GetItem(_obj3,i));
	}
	*sizeptr=size;
}
    fits_create_img(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg3);
}
    return _resultobj;
}

static PyObject *_wrap_fits_delete_hdu(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    int * _arg2;
    char * _argc0 = 0;
int _arg1t;
int _arg2t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"s:fits_delete_hdu",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_delete_hdu. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_delete_hdu(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_copy_hdu(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    fitsfile * _arg1;
    int  _arg2;
    int * _arg3;
    char * _argc0 = 0;
    char * _argc1 = 0;
    PyObject * _obj2 = 0;
int _arg3t;
    self = self;
{
	_arg2=0;
}
  _arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"ssO:fits_copy_hdu",&_argc0,&_argc1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_copy_hdu. Expected _fitsfile_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of fits_copy_hdu. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    fits_copy_hdu(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_img(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1=0;
    int * voidtypeptr;
    long  _arg2;
    long  _arg3;
    void * _arg4;
    int * _arg5;
    char * _argc0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;

	int _arg5t;

    self = self;
{
	voidtypeptr = &_arg1;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	_arg4=NULL;
}
  _arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sOOO:fits_write_img",&_argc0,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_img. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj4)
{
	PyArrayObject *ap;
	//fprintf(stderr," 1 type of array: %d",NA_maxType(_obj4));

	if (NA_maxType(_obj4) == 3) {
		/*printf("double\n");fflush(stdout);*/
		ap = (PyArrayObject *)PyArray_CopyFromObject(_obj4, PyArray_DOUBLE, 1, 0);
		_arg4 = (void*)ap->data;
		*voidtypeptr = 82;
	}

	if (NA_maxType(_obj4) == 1) {
		/*printf("long\n");fflush(stdout);*/

		ap = (PyArrayObject *)PyArray_CopyFromObject(_obj4, PyArray_LONG, 1, 0);
		_arg4 = (void*)ap->data;
		*voidtypeptr = 31;
	}
	//fprintf(stderr,"here!");

}
    fits_write_img(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	//free(_arg4);
}
    return _resultobj;
}

static PyObject *_wrap_fits_resize_img(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    int  _arg2=0;
    int * sizeptr;
    long * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
int _arg4t;
    self = self;
{
	_arg1=0;
}
{
	sizeptr = &_arg2;
}
{
	_arg3=NULL;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOO:fits_resize_img",&_argc0,&_obj1,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_resize_img. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    if (_obj3)
{
	long i,size=0;

	if (PyList_Check(_obj3)) {
		size = PyList_Size(_obj3);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg3 = (long *) calloc(size,sizeof(long));
	if (_arg3 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg3[i]= (long) PyInt_AsLong(PyList_GetItem(_obj3,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_resize_img(_arg0,_arg1,_arg2,_arg3,_arg4);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg3);
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_img(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * voidtypeptr;
    long  _arg2;
    long  _arg3;
    long * nelementsptr;
    void * _arg4;
    void * _arg5;
    int * _arg6;
    int * _arg7;
int _arg6t;
int _arg7t;
    char * _argc0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj4 = 0;

    self = self;
{
        voidtypeptr = &_arg1;
}
{
        _arg2=0;
}
{
        nelementsptr = &_arg3;
}
{
        _arg4=NULL;
}

  _arg6t=0;
  _arg6=&_arg6t;
  _arg7t=0;
  _arg7=&_arg7t;

    if(!PyArg_ParseTuple(args,"sOlO:fits_read_img",&_argc0,&_obj2,&_arg3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_img. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    if (_obj4)
{
	long *ltmp;
	double *dtmp;
	
	if(PyInt_Check(_obj4)) {
		ltmp = calloc(1,sizeof(long));
		if (ltmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 31;
		*ltmp=PyInt_AsLong(_obj4);
		_arg4 = (void *)ltmp;
		/*free(ltmp);*/
	}
	if(PyFloat_Check(_obj4)) {
		dtmp = calloc(1,sizeof(double));
		if (dtmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 82;
		*dtmp=PyFloat_AsDouble(_obj4);
		_arg4 = (void *)dtmp;
		/*free(dtmp);*/
	}
	if(PyString_Check(_obj4)) {
		*voidtypeptr = 16;
		_arg4=(void *)PyString_AsString(_obj4);
	}

	if (!PyInt_Check(_obj4) && !PyFloat_Check(_obj4) && !PyString_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int, Float, or String expected"),0));
	}

}
{
	int tmp;	
	tmp = *nelementsptr;
	switch (*voidtypeptr) {
	case 31:
		_arg5 = (void *)calloc(tmp,sizeof(long));
		if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		break;
	case 82:
		_arg5 = (void *)calloc(tmp,sizeof(double));
		if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		break;
	default:
		_arg5 = (void *)calloc(tmp,sizeof(double));
		if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		break;
	}
}
    fits_read_img(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	int i,naxis=1;
	int naxes[2];
	double *dtmp,*dptr;
	long *ltmp,*lptr;
	PyArrayObject *op=NULL;

	naxes[0]=*nelementsptr;
	naxes[1]=1;

	switch (*voidtypeptr) {
	case 31:
		op = (PyArrayObject *) PyArray_FromDims(naxis, (int *)naxes, PyArray_INT);
		if (op == NULL) return Py_BuildValue("s", "");
		ltmp = (long *)op->data;
		lptr = (long *)_arg5;
		for (i=0;i<*nelementsptr;i++) {
			*ltmp = (long)lptr[i];
			ltmp++;	
		}
		break;
	case 82:
		op = (PyArrayObject *) PyArray_FromDims(naxis, (int *)naxes, PyArray_DOUBLE);
		if (op == NULL) return Py_BuildValue("s", "");
		dtmp = (double *)op->data;
		dptr = (double *)_arg5;
		for (i=0;i<*nelementsptr;i++) {
			*dtmp = (double)dptr[i];
			dtmp++;	
		}
		break;
	}
	_resultobj=(PyObject *)op;
	free(_arg5);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg6;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg7!=0) {
		ffgerr(*_arg7,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg7 >= 100) && (*_arg7 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg7 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_imghdr(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int  _arg2=0;
    int * sizeptr;
    long * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
int _arg4t;
    self = self;
{
	_arg1=0;
}
{
	sizeptr = &_arg2;
}
{
	_arg3=NULL;
}
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOO:fits_write_imghdr",&_argc0,&_obj1,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_imghdr. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    if (_obj3)
{
	long i,size=0;

	if (PyList_Check(_obj3)) {
		size = PyList_Size(_obj3);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg3 = (long *) calloc(size,sizeof(long));
	if (_arg3 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg3[i]= (long) PyInt_AsLong(PyList_GetItem(_obj3,i));
	}
	*sizeptr=size;
}
    fits_write_imghdr(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg3);
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_num_cols(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int * _arg1;
    int * _arg2;
    char * _argc0 = 0;
int _arg1t;
int _arg2t;
    self = self;
  _arg1t=0;
  _arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"s:fits_get_num_cols",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_num_cols. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_num_cols(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_num_rows(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    long * _arg1;
    int * _arg2;
    char * _argc0 = 0;
long _arg1t;
int _arg2t;
    self = self;
	_arg1t=0;
	_arg1=&_arg1t;
  _arg2t=0;
  _arg2=&_arg2t;
    if(!PyArg_ParseTuple(args,"s:fits_get_num_rows",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_num_rows. Expected _fitsfile_p.");
        return NULL;
        }
    }
    fits_get_num_rows(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_colnum(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
    int * _arg3;
    int * _arg4;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
int _arg3t;
int _arg4t;
    self = self;
{
	_arg1=0;
}
{
	_arg2=NULL;
}
  _arg3t=0;
  _arg3=&_arg3t;
  _arg4t=0;
  _arg4=&_arg4t;
    if(!PyArg_ParseTuple(args,"sOO:fits_get_colnum",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_colnum. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
    _result = (int )fits_get_colnum(_arg0,_arg1,_arg2,_arg3,_arg4);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg3;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_colname(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
    char * _arg3;
    int * _arg4;
    int * _arg5;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
char _arg3t[FLEN_CARD];
int _arg4t;
int _arg5t;
    self = self;
{
	_arg1=0;
}
{
	_arg2=NULL;
}
	_arg3 = _arg3t;
  _arg4t=0;
  _arg4=&_arg4t;
  _arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sOO:fits_get_colname",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_colname. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
    _result = (int )fits_get_colname(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;

	o = PyString_FromString(_arg3);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg4;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_coltype(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    long * _arg3;
    long * _arg4;
    int * _arg5;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
int _arg2t;
long _arg3t;
long _arg4t;
int _arg5t;
    self = self;
{
	_arg1=0;
}
  _arg2t=0;
  _arg2=&_arg2t;
	_arg3t=0;
	_arg3=&_arg3t;
	_arg4t=0;
	_arg4=&_arg4t;
  _arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sO:fits_get_coltype",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_coltype. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_get_coltype(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg3;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg4;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_bit(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    char * _arg5;
    int * _arg6;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
int _arg6t;
    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
/* Ignoring this parameter */
}
  _arg6t=0;
  _arg6=&_arg6t;
    if(!PyArg_ParseTuple(args,"sOOOl:fits_read_col_bit",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_bit. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg5 = (char *) calloc(tmp,sizeof(char));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    _result = (int )fits_read_col_bit(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg5;
	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg5);
}
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1=0;
    int * voidtypeptr;
    int  _arg2;
    long  _arg3;
    long  _arg4;
    long  _arg5;
    long * nelementsptr;
    void * _arg6;
    void * _arg7;
    int * _arg8;
	int _arg8t;
    int * _arg9;
	int _arg9t;
    char * _argc0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj6 = 0;

    self = self;
{
	voidtypeptr = &_arg1;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	_arg4=0;
}
{
	nelementsptr = &_arg5;
}
{
	_arg6=NULL;
}
{
  /*void *tmp;
    _arg7=tmp;*/
  void * _arg7;
	_arg7=NULL;
}
_arg8t=0;
_arg8=&_arg8t;
_arg9t=0;
_arg9=&_arg9t;

    if(!PyArg_ParseTuple(args,"sOOOlO:fits_read_col",&_argc0,&_obj2,&_obj3,&_obj4,&_arg5,&_obj6)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg4 = PyInt_AsLong(_obj4);
}
    if (_obj6)
{
	long *ltmp;
	double *dtmp;
	
	if(PyInt_Check(_obj6)) {
		ltmp = calloc(1,sizeof(long));
		if (ltmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 31;
		*ltmp=PyInt_AsLong(_obj6);
		_arg6 = (void *)ltmp;
		/*free(ltmp);*/
	}
	if(PyFloat_Check(_obj6)) {
		dtmp = calloc(1,sizeof(double));
		if (dtmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		*voidtypeptr = 82;
		*dtmp=PyFloat_AsDouble(_obj6);
		_arg6 = (void *)dtmp;
		/*free(dtmp);*/
	}
	if(PyString_Check(_obj6)) {
		*voidtypeptr = 16;
		_arg6=(void *)PyString_AsString(_obj6);
	}

	if (!PyInt_Check(_obj6) && !PyFloat_Check(_obj6) && !PyString_Check(_obj6)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int, Float, or String expected"),0));
	}

}
{
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	switch (*voidtypeptr) {
	case 31:
		_arg7 = (void *)calloc(tmp,sizeof(long));
		if (_arg7 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		break;
	case 82:
		_arg7 = (void *)calloc(tmp,sizeof(double));
		if (_arg7 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		break;
	default:
		_arg7 = (void *)calloc(tmp,sizeof(double));
		if (_arg7 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		break;
	}
}
    fits_read_col(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *ltmp;
	double *dtmp;

	o = PyList_New(*nelementsptr);
	switch (*voidtypeptr) {
	case 31:
		ltmp = (long *)_arg7;
		for (i=0;i<*nelementsptr;i++) {
			 PyList_SetItem(o,i,PyInt_FromLong(ltmp[i]));
		}
		break;
	case 82:
		dtmp = (double *)_arg7;	
		for (i=0;i<*nelementsptr;i++) {
			if (*voidtypeptr == 82) PyList_SetItem(o,i,PyFloat_FromDouble(dtmp[i]));
		}
		break;
	default:
		dtmp = (double *)_arg7;	
		for (i=0;i<*nelementsptr;i++) {
			if (*voidtypeptr == 82) PyList_SetItem(o,i,PyFloat_FromDouble(dtmp[i]));
		}
		break;
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg7);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg8;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg9!=0) {
		ffgerr(*_arg9,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg9 >= 100) && (*_arg9 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg9 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_byt(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    unsigned char  _arg5;
    unsigned char * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;

_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOlb:fits_read_col_byt",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_byt. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (unsigned char *) calloc(tmp,sizeof(unsigned char));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_byt(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;
	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_log(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    char  _arg5;
    char * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOlc:fits_read_col_log",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_log. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (char *) calloc(tmp,sizeof(char));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_log(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;
	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_sht(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    short  _arg5;
    short * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOlh:fits_read_col_sht",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_sht. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (short *)calloc(tmp,sizeof(short));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_sht(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_usht(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    unsigned short  _arg5;
    unsigned short * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOlh:fits_read_col_usht",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_usht. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (unsigned short *)calloc(tmp,sizeof(unsigned short));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_usht(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_int(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    int  _arg5;
    int * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
	_arg5=0;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOlO:fits_read_col_int",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_int. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj5)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg5 = PyInt_AsLong(_obj5);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (int *)calloc(tmp,sizeof(int));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_int(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_uint(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    unsigned int  _arg5;
    unsigned int * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOli:fits_read_col_uint",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_uint. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (unsigned int *)calloc(tmp,sizeof(unsigned int));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_uint(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_lng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    long  _arg5;
    long * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
	_arg5=0;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOlO:fits_read_col_lng",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_lng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj5)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg5 = PyInt_AsLong(_obj5);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (long *)calloc(tmp,sizeof(long));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_lng(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong((long) tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_ulng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    unsigned long  _arg5;
    unsigned long * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOll:fits_read_col_ulng",&_argc0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_ulng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (unsigned long *)calloc(tmp,sizeof(unsigned long));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_ulng(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_flt(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    float  _arg5;
    float * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
	_arg5=0.0;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;

    if(!PyArg_ParseTuple(args,"sOOOOO:fits_read_col_flt",&_argc0,&_obj1,&_obj2,&_obj3,&_obj4,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_flt. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg4 = PyInt_AsLong(_obj4);
}
{
	if (!PyFloat_Check(_obj5)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Float expected"),0));
	}
	_arg5 = PyFloat_AsDouble(_obj5);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (float *)calloc(tmp,sizeof(float));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    fits_read_col_flt(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	float *tmp;

	o = PyList_New(*nelementsptr);
	tmp = _arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyFloat_FromDouble((double) tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_dbl(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    double  _arg5;
    double * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj5 = 0;
    char * _argc6 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
	_arg5=0.0;
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;
  
    if(!PyArg_ParseTuple(args,"sOOOOOs:fits_read_col_dbl",&_argc0,&_obj1,&_obj2,&_obj3,&_obj4,&_obj5,&_argc6)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_dbl. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg4 = PyInt_AsLong(_obj4);
}
{
	if (!PyFloat_Check(_obj5)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Float expected"),0));
	}
	_arg5 = PyFloat_AsDouble(_obj5);
}
    if (_argc6) {
        if (SWIG_GetPtr(_argc6,(void **) &_arg6,"_double_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 7 of fits_read_col_dbl. Expected _double_p.");
        return NULL;
        }
    }
    fits_read_col_dbl(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	double *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (double *)_arg6;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyFloat_FromDouble(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_cmp(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    float  _arg5;
    float * _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj5 = 0;
    char * _argc6 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
	_arg5=0.0;
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;
  
    if(!PyArg_ParseTuple(args,"sOOOOOs:fits_read_col_cmp",&_argc0,&_obj1,&_obj2,&_obj3,&_obj4,&_obj5,&_argc6)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_cmp. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg4 = PyInt_AsLong(_obj4);
}
{
	if (!PyFloat_Check(_obj5)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Float expected"),0));
	}
	_arg5 = PyFloat_AsDouble(_obj5);
}
    if (_argc6) {
        if (SWIG_GetPtr(_argc6,(void **) &_arg6,"_float_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 7 of fits_read_col_cmp. Expected _float_p.");
        return NULL;
        }
    }
    fits_read_col_cmp(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	float *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (float *)_arg6;	
	for (i=0;i<*nelementsptr;i+=2) {
		PyList_SetItem(o,i,PyComplex_FromDoubles((double) tmp[i],(double)tmp[i+1]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_col_str(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4;
    long * nelementsptr;
    char * _arg5;
    char ** _arg6;
    int * _arg7;
    int * _arg8;
	int _arg7t;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	nelementsptr = &_arg4;
}
{
	_arg5=NULL;
}
{
/* Ignoring this parameter */
}
_arg7t=0;
  _arg7=&_arg7t;
_arg8t=0;
  _arg8=&_arg8t;
      if(!PyArg_ParseTuple(args,"sOOOOO:fits_read_col_str",&_argc0,&_obj1,&_obj2,&_obj3,&_obj4,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_col_str. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg4 = PyInt_AsLong(_obj4);
}
{
	char *tmp;
	if (!PyString_Check(_obj5)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	tmp = PyString_AsString(_obj5);
	_arg5=(&tmp)[0];
}
{
/* Allocating enough memory for this array */
	int tmp,i;
	tmp = 0;
	tmp = *nelementsptr;
	_arg6 = (char **) malloc(tmp*sizeof(char *));
	if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
	for (i=0;i<*nelementsptr;i++) {
		_arg6[i]=malloc(1000*sizeof(char)); /* Alloction some room or some large strings */
		if (_arg6[i] == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
	}
}
    fits_read_col_str(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	char **tmp;

	fprintf(stderr,"here\n");
	o = PyList_New(*nelementsptr);
	tmp = (char **) _arg6;
	
	for (i=0;i<*nelementsptr;i++) {
		fprintf(stderr,"%s\n",tmp[i]);
		PyList_SetItem(o,i,PyString_FromString(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	for (i=0;i<*nelementsptr;i++) free(_arg6[i]);
	free(_arg6);
}
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg7;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_create_tbl(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    int  _arg3;
    long * sizeptr;
    char ** _arg4;
    char ** _arg5;
    char ** _arg6;
    char * _arg7;
    int * _arg8;
	int _arg8t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj5 = 0;
    PyObject * _obj6 = 0;
    PyObject * _obj7 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	sizeptr = &_arg3;
}
{
	_arg4=NULL;
}
{
	_arg5=NULL;
}
{
	_arg6=NULL;
}
{
	_arg7=NULL;
}

_arg8t=0;
  _arg8=&_arg8t;
      if(!PyArg_ParseTuple(args,"sOOOOOO:fits_create_tbl",&_argc0,&_obj1,&_obj2,&_obj4,&_obj5,&_obj6,&_obj7)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_create_tbl. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	long i,size=0;
	char **arr;
	int ok=0;

	if (PyList_Check(_obj4)) {
		size = PyList_Size(_obj4);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}


	/* Allocate an array of string pointers */	
	arr = (char **) malloc(size*sizeof(char *));

	for(i=0;i<size;i++) {
		arr[i] = PyString_AsString(PyList_GetItem(_obj4,i));
		//fprintf(stderr,"%s\n",arr[i]);
	}

	_arg4 = arr;
	*sizeptr=size;

}
{
	long i,size=0;
	char **arr;
	int ok=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}


	/* Allocate an array of string pointers */	
	arr = (char **) malloc(size*sizeof(char *));

	for(i=0;i<size;i++) {
		arr[i] = PyString_AsString(PyList_GetItem(_obj5,i));
		//fprintf(stderr,"%s\n",arr[i]);
	}

	_arg5 = arr;
	*sizeptr=size;

}
{
	long i,size=0;
	char **arr;
	int ok=0;

	if (PyList_Check(_obj6)) {
		size = PyList_Size(_obj6);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}


	/* Allocate an array of string pointers */	
	arr = (char **) malloc(size*sizeof(char *));

	for(i=0;i<size;i++) {
		arr[i] = PyString_AsString(PyList_GetItem(_obj6,i));
		//fprintf(stderr,"%s\n",arr[i]);
	}

	_arg6 = arr;
	*sizeptr=size;

}
    if (_obj7)
{
	if (!PyString_Check(_obj7)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg7=PyString_AsString(_obj7);
}
    fits_create_tbl(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg8!=0) {
		ffgerr(*_arg8,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg8 >= 100) && (*_arg8 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg8 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_null(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
_arg5t=0;
  _arg5=&_arg5t;

    if(!PyArg_ParseTuple(args,"sOOO:fits_write_col_null",&_argc0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_null. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    _result = (int )fits_write_col_null(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_bit(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    char * _arg5;
	int _arg6t;
    int * _arg6;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;

    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_bit",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_bit. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (char *) calloc(size,sizeof(char));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]= (char) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_bit(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1=0;
    int * voidtypeptr;
    int  _arg2;
    long  _arg3;
    long  _arg4;
    long  _arg5=0;
    long * sizeptr;
    void * _arg6;
    int * _arg7;
	int _arg7t;
    char * _argc0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj6 = 0;

    self = self;
{
	voidtypeptr = &_arg1;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	_arg4=0;
}
{
	sizeptr = &_arg5;
}
{
	_arg6=NULL;
}
_arg7t=0;
  _arg7=&_arg7t;

    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col",&_argc0,&_obj2,&_obj3,&_obj4,&_obj6)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg4 = PyInt_AsLong(_obj4);
}
    if (_obj6)
{
	long i,size=0;
	long *ltmp;
	double *dtmp;
	int ok=0;

	if (PyList_Check(_obj6)) {
		size = PyList_Size(_obj6);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}



	if(PyInt_Check(PyList_GetItem(_obj6,0))) {
		*voidtypeptr = 31;
		ltmp = (long *) calloc(size,sizeof(long));
		if (ltmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		for (i=0;i<size;i++) {
			ltmp[i] = PyInt_AsLong(PyList_GetItem(_obj6,i));
		}
		_arg6 = (void *) calloc(size,sizeof(long));
		if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		_arg6 = memcpy(_arg6,ltmp,size*sizeof(long));
		free(ltmp);
		*sizeptr=size;
		ok = 1;
	}

	if(PyFloat_Check(PyList_GetItem(_obj6,0))) {
		*voidtypeptr = 82;
		dtmp = (double *) calloc(size,sizeof(double));
		if (dtmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		for (i=0;i<size;i++) {
			dtmp[i] = PyFloat_AsDouble(PyList_GetItem(_obj6,i));
		}
		_arg6 = (void *) calloc(size,sizeof(double));
		if (_arg6 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
		_arg6 = memcpy(_arg6,dtmp,size*sizeof(double));
		free(dtmp);
		*sizeptr=size;
		ok = 1;
	}
	if (ok!=1) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Input data type not supported (PyInt and PyFloat only)"),0));
}
    _result = (int )fits_write_col(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg7!=0) {
		ffgerr(*_arg7,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg7 >= 100) && (*_arg7 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg7 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg6);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_byt(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    unsigned char * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;

    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_byt",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_byt. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (unsigned char *) calloc(size,sizeof(unsigned char));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]=(unsigned char) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_byt(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_log(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    char * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;

    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_log",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_log. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (char *) calloc(size,sizeof(char));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]= (char) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_log(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_sht(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    short * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_sht",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_sht. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (short *) calloc(size,sizeof(short));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]=(short) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_sht(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_usht(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    ushort * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_usht",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_usht. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}


	_arg5 = (unsigned short *) calloc(size,sizeof(unsigned short));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]=(unsigned short) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_usht(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_lng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    long * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_lng",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_lng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (long *) calloc(size,sizeof(long));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]= (long) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_lng(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_ulng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    unsigned long * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_ulng",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_ulng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (unsigned long *) calloc(size,sizeof(unsigned long));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]= (unsigned long) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_ulng(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_int(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    int * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_int",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_int. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (int *) calloc(size,sizeof(int));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]= (int) PyInt_AsLong(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_int(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_flt(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    float * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_flt",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_flt. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (float *) calloc(size,sizeof(float));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]= (float) PyFloat_AsDouble(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_flt(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_dbl(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    double * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_dbl",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_dbl. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg5 = (double *) calloc(size,sizeof(double));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg5[i]= (double) PyFloat_AsDouble(PyList_GetItem(_obj5,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_col_dbl(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_col_str(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    long  _arg2;
    long  _arg3;
    long  _arg4=0;
    long * sizeptr;
    char ** _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	sizeptr = &_arg4;
}
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_col_str",&_argc0,&_obj1,&_obj2,&_obj3,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_col_str. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_obj5)
{
	long i,size=0;
	char **arr;
	int ok=0;

	if (PyList_Check(_obj5)) {
		size = PyList_Size(_obj5);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}


	/* Allocate an array of string pointers */	
	arr = (char **) malloc(size*sizeof(char *));

	for(i=0;i<size;i++) {
		arr[i] = PyString_AsString(PyList_GetItem(_obj5,i));
		//fprintf(stderr,"%s\n",arr[i]);
	}

	_arg5 = arr;
	*sizeptr=size;

}
    _result = (int )fits_write_col_str(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_insert_rows(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;


    if(!PyArg_ParseTuple(args,"sOO:fits_insert_rows",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_insert_rows. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    fits_insert_rows(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_delete_rows(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;

    if(!PyArg_ParseTuple(args,"sOO:fits_delete_rows",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_delete_rows. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    fits_delete_rows(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_delete_rowlist(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    long * _arg1;
    long  _arg2;
    long * sizeptr;
    int * _arg3;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=NULL;
}
{
	sizeptr = &_arg2;
}
{
  int tmp;
  tmp=0;
  _arg3=&tmp;
}
    if(!PyArg_ParseTuple(args,"sO:fits_delete_rowlist",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_delete_rowlist. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	long i,size=0;

	if (PyList_Check(_obj1)) {
		size = PyList_Size(_obj1);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg1 = (long *) calloc(size,sizeof(long));
	if (_arg1 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg1[i]= (long) PyInt_AsLong(PyList_GetItem(_obj1,i));
	}
	*sizeptr=size;
}
    fits_delete_rowlist(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg1);
}
    return _resultobj;
}

static PyObject *_wrap_fits_delete_col(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
	int _arg2t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=0;
}
_arg2t=0;
  _arg2=&_arg2t;


    if(!PyArg_ParseTuple(args,"sO:fits_delete_col",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_delete_col. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    fits_delete_col(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_copy_col(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    fitsfile * _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    char * _argc1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;

    self = self;
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	_arg4=0;
}
_arg5t=0;
  _arg5=&_arg5t;


    if(!PyArg_ParseTuple(args,"ssOOO:fits_copy_col",&_argc0,&_argc1,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_copy_col. Expected _fitsfile_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of fits_copy_col. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	if (!PyInt_Check(_obj4)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg4 = PyInt_AsLong(_obj4);
}
    fits_copy_col(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_insert_col(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
    char * _arg3;
    int * _arg4;
	int _arg4t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=NULL;
}
{
	_arg3=NULL;
}
_arg4t=0;
  _arg4=&_arg4t;


    if(!PyArg_ParseTuple(args,"sOOO:fits_insert_col",&_argc0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_insert_col. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
{
	if (!PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg3=PyString_AsString(_obj3);
}
    fits_insert_col(_arg0,_arg1,_arg2,_arg3,_arg4);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_keys_lng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int  _arg2;
    int  _arg3;
    int * out_size;
    long * _arg4;
    int * _arg5;
	int _arg5t;
    int * out_nfoundptr;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=NULL;
}
{
	out_size = &_arg3;
}
{
}
_arg5t=0;
  _arg5=&_arg5t;

out_nfoundptr=&_arg5t;

_arg6t=0;
  _arg6=&_arg6t;


    if(!PyArg_ParseTuple(args,"sOii:fits_read_keys_lng",&_argc0,&_obj1,&_arg2,&_arg3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_keys_lng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	long *tmp;
	tmp = calloc(*out_size,sizeof(long));
	if (tmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
	_arg4=tmp;
}
    fits_read_keys_lng(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	long *ltmp;
	ltmp = (long *)_arg4;
	o = PyList_New(*out_nfoundptr);

	for (i=0;i<*out_nfoundptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong(_arg4[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg4);
}
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_keys_dbl(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int  _arg2;
    int  _arg3;
    int * out_size;
    double * _arg4;
    int * _arg5;
    int * out_nfoundptr;
    int * _arg6;
	int _arg5t;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=NULL;
}
{
	out_size = &_arg3;
}
{
}
_arg5t=0;
  _arg5=&_arg5t;

out_nfoundptr=&_arg5t;

_arg6t=0;
  _arg6=&_arg6t;
  
    if(!PyArg_ParseTuple(args,"sOii:fits_read_keys_dbl",&_argc0,&_obj1,&_arg2,&_arg3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_keys_dbl. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	double *tmp;
	tmp = calloc(*out_size,sizeof(double));
	if (tmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
	_arg4=tmp;
}
    fits_read_keys_dbl(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	double *dtmp;
	dtmp = (double *)_arg4;
	o = PyList_New(*out_nfoundptr);

	for (i=0;i<*out_nfoundptr;i++) {
		PyList_SetItem(o,i,PyFloat_FromDouble(_arg4[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg4);
}
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_keys_str(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    fitsfile * _arg0;
    char * _arg1;
    int  _arg2;
    int  _arg3;
    int * out_size;
    char ** _arg4;
    int * _arg5;
    int * out_nfoundptr;
    int * _arg6;
	int _arg5t;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=NULL;
}
{
	out_size = &_arg3;
}
_arg5t=0;
  _arg5=&_arg5t;

out_nfoundptr=&_arg5t;

_arg6t=0;
  _arg6=&_arg6t;
    if(!PyArg_ParseTuple(args,"sOii:fits_read_keys_str",&_argc0,&_obj1,&_arg2,&_arg3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_keys_str. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	char **tmp;
	int i;
	tmp = (char **)calloc(*out_size,sizeof(char *));
	if (tmp == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
	for (i=0;i<*out_size;i++) {
		tmp[i]=(char *) calloc(255,sizeof(char));
		if (tmp[i] == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
	}
	_arg4=(char **)tmp;
}
    fits_read_keys_str(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;
	int i;
	o = PyList_New(*out_nfoundptr);
	for (i=0;i<*out_nfoundptr;i++) {
		PyList_SetItem(o,i,PyString_FromString(_arg4[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	for (i=0;i<*out_size;i++) free(_arg4[i]);
	free(_arg4);
}
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_keytype(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    char * _arg0;
    char * _arg1;
    int * _arg2;
	int _arg2t;
    PyObject * _obj0 = 0;

    self = self;
{
	_arg0=NULL;
}
{
	char tmp[FLEN_CARD];
	_arg1 = tmp;
}
_arg2t=0;
  _arg2=&_arg2t;
  
    if(!PyArg_ParseTuple(args,"O:fits_get_keytype",&_obj0)) 
        return NULL;
{
	if (!PyString_Check(_obj0)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg0=PyString_AsString(_obj0);
}
    fits_get_keytype(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
	PyObject *o;

	o = PyString_FromString(_arg1);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_chksum(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    unsigned long * _arg1;
    unsigned long * _arg2;
    int * _arg3;
	unsigned long  _arg1t;
    unsigned long  _arg2t;
    int _arg3t;
    char * _argc0 = 0;

    self = self;
_arg1t=0;
	_arg1=&_arg1t;
_arg2t=0;
	_arg2=&_arg2t;
_arg3t=0;
  _arg3=&_arg3t;

    if(!PyArg_ParseTuple(args,"s:fits_get_chksum",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_chksum. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (int )fits_get_chksum(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_img_coord(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    double * _arg1;
    double * _arg2;
    double * _arg3;
    double * _arg4;
    double * _arg5;
    double * _arg6;
    double * _arg7;
	double  _arg1t;
    double _arg2t;
    double  _arg3t;
    double  _arg4t;
    double  _arg5t;
    double  _arg6t;
    double  _arg7t;
	int  _arg9t;
    char * _arg8;
    int  *_arg9;
    char * _argc0 = 0;
    PyObject * _obj8 = 0;

    self = self;
_arg1t=0;
	_arg1=&_arg1t;
_arg2t=0;
	_arg2=&_arg2t;
_arg3t=0;
	_arg3=&_arg3t;
_arg4t=0;
	_arg4=&_arg4t;
_arg5t=0;
	_arg5=&_arg5t;
_arg6t=0;
	_arg6=&_arg6t;
_arg7t=0;
	_arg7=&_arg7t;
	{
	_arg8=NULL;
}
_arg9t=0;
	_arg9=&_arg9t;
	
    if(!PyArg_ParseTuple(args,"sO:fits_read_img_coord",&_argc0,&_obj8)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_img_coord. Expected _fitsfile_p.");
        return NULL;
        }
    }
    if (_obj8)
{
	if (!PyString_Check(_obj8)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg8=PyString_AsString(_obj8);
}
    _result = (int )fits_read_img_coord(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg1;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg2;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg3;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg4;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg5;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg6;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg7;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg9!=0) {
		ffgerr(*_arg9,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg9 >= 100) && (*_arg9 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg9 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_create_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    char * _arg1;
    int  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg1=NULL;
}
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;

    if(!PyArg_ParseTuple(args,"sOO:fits_create_group",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_create_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    _result = (int )fits_create_group(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_insert_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    char * _arg1;
    int  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg1=NULL;
}
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;
  
    if(!PyArg_ParseTuple(args,"sOO:fits_insert_group",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_insert_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    _result = (int )fits_insert_group(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_change_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
	int _arg2t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=0;
}
_arg2t=0;
  _arg2=&_arg2t;
  
    if(!PyArg_ParseTuple(args,"sO:fits_change_group",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_change_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    _result = (int )fits_change_group(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_remove_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
	int _arg2t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=0;
}
_arg2t=0;
  _arg2=&_arg2t;
  
    if(!PyArg_ParseTuple(args,"sO:fits_remove_group",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_remove_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    _result = (int )fits_remove_group(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_copy_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    fitsfile * _arg1;
    int  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    char * _argc1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;
  
    if(!PyArg_ParseTuple(args,"ssO:fits_copy_group",&_argc0,&_argc1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_copy_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of fits_copy_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    _result = (int )fits_copy_group(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_merge_groups(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    fitsfile * _arg1;
    int  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    char * _argc1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;
  
    if(!PyArg_ParseTuple(args,"ssO:fits_merge_groups",&_argc0,&_argc1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_merge_groups. Expected _fitsfile_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of fits_merge_groups. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    _result = (int )fits_merge_groups(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_compact_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=0;
}
{
  int tmp;
  tmp=0;
  _arg2=&tmp;
}
    if(!PyArg_ParseTuple(args,"sO:fits_compact_group",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_compact_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    _result = (int )fits_compact_group(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_verify_group(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long * _arg1;
    int * _arg2;
	long _arg1t;
	int _arg2t;
    char * _argc0 = 0;

    self = self;
_arg1t=0;
  _arg1=&_arg1t;
_arg2t=0;
  _arg2=&_arg2t;
  
    if(!PyArg_ParseTuple(args,"s:fits_verify_group",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_verify_group. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (int )fits_verify_group(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_add_group_member(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    fitsfile * _arg1;
    int  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;
  
    if(!PyArg_ParseTuple(args,"sOO:fits_add_group_member",&_argc0,&_obj1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_add_group_member. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (PyInt_Check(_obj1)) {
		_arg1 = (fitsfile *) NULL;
		/*printf("fitsfile pointer is NULL\n");*/
	}
	else {
		/*printf("fitsfile pointer is NOT NULL\n");*/
		_arg1 = (fitsfile *) _obj1;
	}



}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    _result = (int )fits_add_group_member(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_num_members(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long * _arg1;
    int * _arg2;
	long _arg1t;
	int _arg2t;
    char * _argc0 = 0;

    self = self;
_arg1t=0;
	_arg1=&_arg1t;
_arg2t=0;
  _arg2=&_arg2t;

    if(!PyArg_ParseTuple(args,"s:fits_get_num_members",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_num_members. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (int )fits_get_num_members(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_num_groups(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long * _arg1;
    int * _arg2;
	long _arg1t;
	int _arg2t;
    char * _argc0 = 0;

    self = self;
_arg1t=0;
	_arg1=&_arg1t;
_arg2t=0;
  _arg2=&_arg2t;
  
    if(!PyArg_ParseTuple(args,"s:fits_get_num_groups",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_num_groups. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (int )fits_get_num_groups(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_copy_member(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    fitsfile * _arg1;
    long  _arg2;
    int  _arg3;
    int * _arg4;
	int _arg4t;
    char * _argc0 = 0;
    char * _argc1 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg3=0;
}
_arg4t=0;
  _arg4=&_arg4t;

    if(!PyArg_ParseTuple(args,"sslO:fits_copy_member",&_argc0,&_argc1,&_arg2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_copy_member. Expected _fitsfile_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of fits_copy_member. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    _result = (int )fits_copy_member(_arg0,_arg1,_arg2,_arg3,_arg4);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_transfer_member(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    fitsfile * _arg1;
    long  _arg2;
    int  _arg3;
    int * _arg4;
	int _arg4t;
    char * _argc0 = 0;
    char * _argc1 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg3=0;
}
_arg4t=0;
  _arg4=&_arg4t;
  
    if(!PyArg_ParseTuple(args,"sslO:fits_transfer_member",&_argc0,&_argc1,&_arg2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_transfer_member. Expected _fitsfile_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of fits_transfer_member. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    _result = (int )fits_transfer_member(_arg0,_arg1,_arg2,_arg3,_arg4);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_remove_member(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long  _arg1;
    int  _arg2;
    int * _arg3;
	int _arg3t;
    char * _argc0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2=0;
}
_arg3t=0;
  _arg3=&_arg3t;
  
    if(!PyArg_ParseTuple(args,"slO:fits_remove_member",&_argc0,&_arg1,&_obj2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_remove_member. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
    _result = (int )fits_remove_member(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_grppar_lng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    long  _arg3;
    long * _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	_arg4=NULL;
}
_arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_grppar_lng",&_argc0,&_obj1,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_grppar_lng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	PyArrayObject *ap;
	//fprintf(stderr,"3 type of array: %d",NA_maxType(_obj4));

	if (NA_maxType(_obj4) == 1) {
		printf("long\n");fflush(stdout);	
		ap = (PyArrayObject *)PyArray_CopyFromObject(_obj4, PyArray_LONG, 1, 0);
		_arg4 = (long*)ap->data;
	}
}
    _result = (int )fits_write_grppar_lng(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_grppar_dbl(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    long  _arg3;
    double * _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
{
	_arg4=NULL;
}
_arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sOOOO:fits_write_grppar_dbl",&_argc0,&_obj1,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_grppar_dbl. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	PyArrayObject *ap;

	//fprintf(stderr," 2 type of array: %d",NA_maxType(_obj4));

	if (NA_maxType(_obj4) == 3) {
		printf("double\n");fflush(stdout);	
		ap = (PyArrayObject *)PyArray_CopyFromObject(_obj4, PyArray_DOUBLE, 1, 0);
		_arg4 = (double*)ap->data;
	}
}
    _result = (int )fits_write_grppar_dbl(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_grppar_lng(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    long  _arg3;
    long * nelementsptr;
    long * _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	nelementsptr = &_arg3;
}
{
	_arg4=NULL;
}
{
/* Ignoring this parameter */
}
_arg5t=0;
  _arg5=&_arg5t;
    if(!PyArg_ParseTuple(args,"sOOO:fits_read_grppar_lng",&_argc0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_grppar_lng. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg4 = (long *)calloc(tmp,sizeof(long));
	if (_arg4 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    _result = (int )fits_read_grppar_lng(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg4;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong((long) tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg4);
}
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_grppar_dbl(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    long  _arg3;
    long * nelementsptr;
    double * _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	nelementsptr = &_arg3;
}
{
	_arg4=NULL;
}
_arg5t=0;
  _arg5=&_arg5t;
  
    if(!PyArg_ParseTuple(args,"sOOOO:fits_read_grppar_dbl",&_argc0,&_obj1,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_grppar_dbl. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
{
	PyArrayObject *ap;

	//fprintf(stderr," 2 type of array: %d",NA_maxType(_obj4));

	if (NA_maxType(_obj4) == 3) {
		printf("double\n");fflush(stdout);	
		ap = (PyArrayObject *)PyArray_CopyFromObject(_obj4, PyArray_DOUBLE, 1, 0);
		_arg4 = (double*)ap->data;
	}
}
    _result = (int )fits_read_grppar_dbl(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	int i;
	double *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (double *)_arg4;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyFloat_FromDouble(tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg4);
}
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_col_display_width(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    int * _arg2;
    int * _arg3;
	int _arg2t;
	int _arg3t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=0;
}
_arg2t=0;
  _arg2=&_arg2t;
_arg3t=0;
  _arg3=&_arg3t;
    if(!PyArg_ParseTuple(args,"sO:fits_get_col_display_width",&_argc0,&_obj1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_col_display_width. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    _result = (int )fits_get_col_display_width(_arg0,_arg1,_arg2,_arg3);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg2;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg3!=0) {
		ffgerr(*_arg3,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg3 >= 100) && (*_arg3 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg3 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_acolparms(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
	char _arg2t[FLEN_CARD];
    long * _arg3;
	long _arg3t;
    char * _arg4;
    char * _arg5;
    double * _arg6;
	double _arg6t;
    double * _arg7;
	double _arg7t;
    char * _arg8;
	char _arg8t[FLEN_CARD];
    char * _arg9;
	char _arg9t[FLEN_CARD];
    int * _arg10;
	int _arg10t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj5 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=NULL;
}

_arg3t=0;
  _arg3=&_arg3t;
{
	_arg5=NULL;
}
_arg6t=0;
  _arg6=&_arg6t;
_arg7t=0;
  _arg7=&_arg7t;
	_arg8 = _arg8t;
	_arg9 = _arg9t;
_arg10t=0;
  _arg10=&_arg10t;
  
    if(!PyArg_ParseTuple(args,"sOsO:fits_get_acolparms",&_argc0,&_obj1,&_arg4,&_obj5)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_acolparms. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    if (_obj5)
{
	if (!PyString_Check(_obj5)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg5=PyString_AsString(_obj5);
}
    _result = (int )fits_get_acolparms(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;

	o = PyString_FromString(_arg2);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg3;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg6;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg7;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg8);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg9);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg10!=0) {
		ffgerr(*_arg10,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg10 >= 100) && (*_arg10 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg10 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_bcolparms(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
    char * _arg3;
	char _arg3t[FLEN_CARD];
    char * _arg4;
	char _arg4t[FLEN_CARD];
    long * _arg5;
	long _arg5t;
    double * _arg6;
	double _arg6t;
    double * _arg7;
	double _arg7t;
    long * _arg8;
	long _arg8t;
    char * _arg9;
	char _arg9t[FLEN_CARD];
    int * _arg10;
	int _arg10t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=NULL;
}

	_arg3 = _arg3t;
	_arg4 = _arg4t;
_arg5t=0;
  _arg5=&_arg5t;
_arg6t=0;
  _arg6=&_arg6t;
_arg7t=0;
  _arg7=&_arg7t;
  _arg8t=0;
  _arg8=&_arg8t;
  	_arg9 = _arg9t;
_arg10t=0;
  _arg10=&_arg10t;
  
    if(!PyArg_ParseTuple(args,"sOs:fits_get_bcolparms",&_argc0,&_obj1,&_arg3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_bcolparms. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    _result = (int )fits_get_bcolparms(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;

	o = PyString_FromString(_arg2);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg4);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg5;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg6;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	double tmp;

	tmp = (double) *_arg7;

	o = PyFloat_FromDouble(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg8;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;

	o = PyString_FromString(_arg9);

	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg10!=0) {
		ffgerr(*_arg10,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg10 >= 100) && (*_arg10 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg10 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_tdim(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    int  _arg2=0;
    int * sizeptr;
    long * _arg3;
    int * _arg4;
	int _arg4t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	sizeptr = &_arg2;
}
{
	_arg3=NULL;
}
_arg4t=0;
  _arg4=&_arg4t;

    if(!PyArg_ParseTuple(args,"sOO:fits_write_tdim",&_argc0,&_obj1,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_tdim. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
    if (_obj3)
{
	long i,size=0;

	if (PyList_Check(_obj3)) {
		size = PyList_Size(_obj3);
	}
	else {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"List expected"),0));
	}

	_arg3 = (long *) calloc(size,sizeof(long));
	if (_arg3 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));

	for (i=0;i<size;i++) {
		_arg3[i]= (long) PyInt_AsLong(PyList_GetItem(_obj3,i));
	}
	*sizeptr=size;
}
    _result = (int )fits_write_tdim(_arg0,_arg1,_arg2,_arg3,_arg4);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
{
	free(_arg3);
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_tdim(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    int  _arg2;
    long * nelementsptr;
    int * _arg3;
	int _arg3t;
    long * _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1=0;
}
{
        nelementsptr = (long *)&_arg2;
}
_arg3t=0;
  _arg3=&_arg3t;

{
/* Ignoring this parameter */
}
_arg5t=0;
  _arg5=&_arg5t;

    if(!PyArg_ParseTuple(args,"sOi:fits_read_tdim",&_argc0,&_obj1,&_arg2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_tdim. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg4 = (long *)calloc(tmp,sizeof(long));
	if (_arg4 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    _result = (int )fits_read_tdim(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg3;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg4;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong((long) tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg4);
}
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_decode_tdim(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    char * _arg1;
    int  _arg2;
    int  _arg3;
    long * nelementsptr;
    int * _arg4;
	int _arg4t;
    long * _arg5;
    int * _arg6;
	int _arg6t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg1=NULL;
}
{
	_arg2=0;
}
{
        nelementsptr = (long *)&_arg3;
}
_arg4t=0;
  _arg4=&_arg4t;

{
/* Ignoring this parameter */
}
_arg6t=0;
  _arg6=&_arg6t;

    if(!PyArg_ParseTuple(args,"sOOi:fits_decode_tdim",&_argc0,&_obj1,&_obj2,&_arg3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_decode_tdim. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyString_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg1=PyString_AsString(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
/* Allocating enough memory for this array */
	int tmp;
	tmp = 0;
	tmp = *nelementsptr;
	_arg5 = (long *)calloc(tmp,sizeof(long));
	if (_arg5 == NULL) return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Could not allocate memory"),0));
}
    _result = (int )fits_decode_tdim(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	int tmp;

	tmp = (int) *_arg4;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	PyObject *o;
	int i;
	long *tmp;

	o = PyList_New(*nelementsptr);
	tmp = (long *)_arg5;	
	for (i=0;i<*nelementsptr;i++) {
		PyList_SetItem(o,i,PyInt_FromLong((long) tmp[i]));
	}
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
	free(_arg5);
}
{
	char str[255];

	if(*_arg6!=0) {
		ffgerr(*_arg6,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg6 >= 100) && (*_arg6 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg6 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_get_rowsize(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long * _arg1;
	long _arg1t;
    int * _arg2;
	int _arg2t;
    char * _argc0 = 0;

    self = self;
_arg1t=0;
	_arg1=&_arg1t;
_arg2t=0;
  _arg2=&_arg2t;

    if(!PyArg_ParseTuple(args,"s:fits_get_rowsize",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_get_rowsize. Expected _fitsfile_p.");
        return NULL;
        }
    }
    _result = (int )fits_get_rowsize(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
{
	PyObject *o;
	long tmp;

	tmp = (long) *_arg1;

	o = PyInt_FromLong(tmp);
	if ((!_resultobj) || (_resultobj == Py_None)) {
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	char str[255];

	if(*_arg2!=0) {
		ffgerr(*_arg2,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg2 >= 100) && (*_arg2 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg2 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_read_tblbytes(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    long  _arg3;
    unsigned char * _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char * _argc4 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
_arg5t=0;
  _arg5=&_arg5t;

    if(!PyArg_ParseTuple(args,"sOOOs:fits_read_tblbytes",&_argc0,&_obj1,&_obj2,&_obj3,&_argc4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_read_tblbytes. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_argc4) {
        if (SWIG_GetPtr(_argc4,(void **) &_arg4,"_unsigned_char_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 5 of fits_read_tblbytes. Expected _unsigned_char_p.");
        return NULL;
        }
    }
    _result = (int )fits_read_tblbytes(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fits_write_tblbytes(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    long  _arg1;
    long  _arg2;
    long  _arg3;
    unsigned char * _arg4;
    int * _arg5;
	int _arg5t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char * _argc4 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=0;
}
{
	_arg3=0;
}
_arg5t=0;
  _arg5=&_arg5t;

    if(!PyArg_ParseTuple(args,"sOOOs:fits_write_tblbytes",&_argc0,&_obj1,&_obj2,&_obj3,&_argc4)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fits_write_tblbytes. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyInt_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg2 = PyInt_AsLong(_obj2);
}
{
	if (!PyInt_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg3 = PyInt_AsLong(_obj3);
}
    if (_argc4) {
        if (SWIG_GetPtr(_argc4,(void **) &_arg4,"_unsigned_char_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 5 of fits_write_tblbytes. Expected _unsigned_char_p.");
        return NULL;
        }
    }
    _result = (int )fits_write_tblbytes(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg5!=0) {
		ffgerr(*_arg5,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg5 >= 100) && (*_arg5 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg5 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyObject *_wrap_fficol(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    fitsfile * _arg0;
    int  _arg1;
    char * _arg2;
    char * _arg3;
    int * _arg4;
	int _arg4t;
    char * _argc0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg1=0;
}
{
	_arg2=NULL;
}
{
	_arg3=NULL;
}
_arg4t=0;
  _arg4=&_arg4t;

    if(!PyArg_ParseTuple(args,"sOOO:fficol",&_argc0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_fitsfile_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of fficol. Expected _fitsfile_p.");
        return NULL;
        }
    }
{
	if (!PyInt_Check(_obj1)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"Int expected"),0));
	}
	_arg1 = PyInt_AsLong(_obj1);
}
{
	if (!PyString_Check(_obj2)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg2=PyString_AsString(_obj2);
}
{
	if (!PyString_Check(_obj3)) {
		return ((PyObject *) (PyErr_SetString(PyExc_TypeError,"String expected"),0));
	}
	_arg3=PyString_AsString(_obj3);
}
    _result = (int )fficol(_arg0,_arg1,_arg2,_arg3,_arg4);
    _resultobj = Py_BuildValue("i",_result);
{
	char str[255];

	if(*_arg4!=0) {
		ffgerr(*_arg4,str);
		printf("PFITSIO: %s\n",str);fflush(stdout);
	/* A file IO error triggers a Python exception */
		if ((*_arg4 >= 100) && (*_arg4 < 120)) {
			return ((PyObject *) (PyErr_SetString(PyExc_IOError,str),0));
		}
		if ((*_arg4 >= 120) ) {
			return ((PyObject *) (PyErr_SetString(PyExc_Exception,str),0));
		}
	}
}
    return _resultobj;
}

static PyMethodDef pcfitsioMethods[] = {
	 { "fficol", _wrap_fficol, 1 },
	 { "fits_write_tblbytes", _wrap_fits_write_tblbytes, 1 },
	 { "fits_read_tblbytes", _wrap_fits_read_tblbytes, 1 },
	 { "fits_get_rowsize", _wrap_fits_get_rowsize, 1 },
	 { "fits_decode_tdim", _wrap_fits_decode_tdim, 1 },
	 { "fits_read_tdim", _wrap_fits_read_tdim, 1 },
	 { "fits_write_tdim", _wrap_fits_write_tdim, 1 },
	 { "fits_get_bcolparms", _wrap_fits_get_bcolparms, 1 },
	 { "fits_get_acolparms", _wrap_fits_get_acolparms, 1 },
	 { "fits_get_col_display_width", _wrap_fits_get_col_display_width, 1 },
	 { "fits_read_grppar_dbl", _wrap_fits_read_grppar_dbl, 1 },
	 { "fits_read_grppar_lng", _wrap_fits_read_grppar_lng, 1 },
	 { "fits_write_grppar_dbl", _wrap_fits_write_grppar_dbl, 1 },
	 { "fits_write_grppar_lng", _wrap_fits_write_grppar_lng, 1 },
	 { "fits_remove_member", _wrap_fits_remove_member, 1 },
	 { "fits_transfer_member", _wrap_fits_transfer_member, 1 },
	 { "fits_copy_member", _wrap_fits_copy_member, 1 },
	 { "fits_get_num_groups", _wrap_fits_get_num_groups, 1 },
	 { "fits_get_num_members", _wrap_fits_get_num_members, 1 },
	 { "fits_add_group_member", _wrap_fits_add_group_member, 1 },
	 { "fits_verify_group", _wrap_fits_verify_group, 1 },
	 { "fits_compact_group", _wrap_fits_compact_group, 1 },
	 { "fits_merge_groups", _wrap_fits_merge_groups, 1 },
	 { "fits_copy_group", _wrap_fits_copy_group, 1 },
	 { "fits_remove_group", _wrap_fits_remove_group, 1 },
	 { "fits_change_group", _wrap_fits_change_group, 1 },
	 { "fits_insert_group", _wrap_fits_insert_group, 1 },
	 { "fits_create_group", _wrap_fits_create_group, 1 },
	 { "fits_read_img_coord", _wrap_fits_read_img_coord, 1 },
	 { "fits_get_chksum", _wrap_fits_get_chksum, 1 },
	 { "fits_get_keytype", _wrap_fits_get_keytype, 1 },
	 { "fits_read_keys_str", _wrap_fits_read_keys_str, 1 },
	 { "fits_read_keys_dbl", _wrap_fits_read_keys_dbl, 1 },
	 { "fits_read_keys_lng", _wrap_fits_read_keys_lng, 1 },
	 { "fits_insert_col", _wrap_fits_insert_col, 1 },
	 { "fits_copy_col", _wrap_fits_copy_col, 1 },
	 { "fits_delete_col", _wrap_fits_delete_col, 1 },
	 { "fits_delete_rowlist", _wrap_fits_delete_rowlist, 1 },
	 { "fits_delete_rows", _wrap_fits_delete_rows, 1 },
	 { "fits_insert_rows", _wrap_fits_insert_rows, 1 },
	 { "fits_write_col_str", _wrap_fits_write_col_str, 1 },
	 { "fits_write_col_dbl", _wrap_fits_write_col_dbl, 1 },
	 { "fits_write_col_flt", _wrap_fits_write_col_flt, 1 },
	 { "fits_write_col_int", _wrap_fits_write_col_int, 1 },
	 { "fits_write_col_ulng", _wrap_fits_write_col_ulng, 1 },
	 { "fits_write_col_lng", _wrap_fits_write_col_lng, 1 },
	 { "fits_write_col_usht", _wrap_fits_write_col_usht, 1 },
	 { "fits_write_col_sht", _wrap_fits_write_col_sht, 1 },
	 { "fits_write_col_log", _wrap_fits_write_col_log, 1 },
	 { "fits_write_col_byt", _wrap_fits_write_col_byt, 1 },
	 { "fits_write_col", _wrap_fits_write_col, 1 },
	 { "fits_write_col_bit", _wrap_fits_write_col_bit, 1 },
	 { "fits_write_col_null", _wrap_fits_write_col_null, 1 },
	 { "fits_create_tbl", _wrap_fits_create_tbl, 1 },
	 { "fits_read_col_str", _wrap_fits_read_col_str, 1 },
	 { "fits_read_col_cmp", _wrap_fits_read_col_cmp, 1 },
	 { "fits_read_col_dbl", _wrap_fits_read_col_dbl, 1 },
	 { "fits_read_col_flt", _wrap_fits_read_col_flt, 1 },
	 { "fits_read_col_ulng", _wrap_fits_read_col_ulng, 1 },
	 { "fits_read_col_lng", _wrap_fits_read_col_lng, 1 },
	 { "fits_read_col_uint", _wrap_fits_read_col_uint, 1 },
	 { "fits_read_col_int", _wrap_fits_read_col_int, 1 },
	 { "fits_read_col_usht", _wrap_fits_read_col_usht, 1 },
	 { "fits_read_col_sht", _wrap_fits_read_col_sht, 1 },
	 { "fits_read_col_log", _wrap_fits_read_col_log, 1 },
	 { "fits_read_col_byt", _wrap_fits_read_col_byt, 1 },
	 { "fits_read_col", _wrap_fits_read_col, 1 },
	 { "fits_read_col_bit", _wrap_fits_read_col_bit, 1 },
	 { "fits_get_coltype", _wrap_fits_get_coltype, 1 },
	 { "fits_get_colname", _wrap_fits_get_colname, 1 },
	 { "fits_get_colnum", _wrap_fits_get_colnum, 1 },
	 { "fits_get_num_rows", _wrap_fits_get_num_rows, 1 },
	 { "fits_get_num_cols", _wrap_fits_get_num_cols, 1 },
	 { "fits_write_imghdr", _wrap_fits_write_imghdr, 1 },
	 { "fits_read_img", _wrap_fits_read_img, 1 },
	 { "fits_resize_img", _wrap_fits_resize_img, 1 },
	 { "fits_write_img", _wrap_fits_write_img, 1 },
	 { "fits_copy_hdu", _wrap_fits_copy_hdu, 1 },
	 { "fits_delete_hdu", _wrap_fits_delete_hdu, 1 },
	 { "fits_create_img", _wrap_fits_create_img, 1 },
	 { "fits_create_hdu", _wrap_fits_create_hdu, 1 },
	 { "fits_get_num_hdus", _wrap_fits_get_num_hdus, 1 },
	 { "fits_movnam_hdu", _wrap_fits_movnam_hdu, 1 },
	 { "fits_movrel_hdu", _wrap_fits_movrel_hdu, 1 },
	 { "fits_movabs_hdu", _wrap_fits_movabs_hdu, 1 },
	 { "fits_get_hduaddr", _wrap_fits_get_hduaddr, 1 },
	 { "fits_get_hdu_type", _wrap_fits_get_hdu_type, 1 },
	 { "fits_get_hdu_num", _wrap_fits_get_hdu_num, 1 },
	 { "fits_delete_record", _wrap_fits_delete_record, 1 },
	 { "fits_delete_key", _wrap_fits_delete_key, 1 },
	 { "fits_write_key_longstr", _wrap_fits_write_key_longstr, 1 },
	 { "fits_modify_key_lng", _wrap_fits_modify_key_lng, 1 },
	 { "fits_modify_key_log", _wrap_fits_modify_key_log, 1 },
	 { "fits_modify_key_str", _wrap_fits_modify_key_str, 1 },
	 { "fits_modify_key_null", _wrap_fits_modify_key_null, 1 },
	 { "fits_modify_comment", _wrap_fits_modify_comment, 1 },
	 { "fits_modify_name", _wrap_fits_modify_name, 1 },
	 { "fits_update_card", _wrap_fits_update_card, 1 },
	 { "fits_write_key", _wrap_fits_write_key, 1 },
	 { "fits_read_key_unit", _wrap_fits_read_key_unit, 1 },
	 { "fits_read_card", _wrap_fits_read_card, 1 },
	 { "fits_read_record", _wrap_fits_read_record, 1 },
	 { "fits_write_key_unit", _wrap_fits_write_key_unit, 1 },
	 { "fits_write_record", _wrap_fits_write_record, 1 },
	 { "fits_write_date", _wrap_fits_write_date, 1 },
	 { "fits_write_history", _wrap_fits_write_history, 1 },
	 { "fits_write_comment", _wrap_fits_write_comment, 1 },
	 { "fits_update_key_null", _wrap_fits_update_key_null, 1 },
	 { "fits_update_key", _wrap_fits_update_key, 1 },
	 { "fits_clear_errmsg", _wrap_fits_clear_errmsg, 1 },
	 { "fits_read_errmsg", _wrap_fits_read_errmsg, 1 },
	 { "fits_write_errmsg", _wrap_fits_write_errmsg, 1 },
	 { "fits_get_errstatus", _wrap_fits_get_errstatus, 1 },
	 { "fits_get_version", _wrap_fits_get_version, 1 },
	 { "fits_movrel_key", _wrap_fits_movrel_key, 1 },
	 { "fits_movabs_key", _wrap_fits_movabs_key, 1 },
	 { "fits_read_key_lng", _wrap_fits_read_key_lng, 1 },
	 { "fits_read_key_dbl", _wrap_fits_read_key_dbl, 1 },
	 { "fits_read_key_log", _wrap_fits_read_key_log, 1 },
	 { "fits_read_keyword", _wrap_fits_read_keyword, 1 },
	 { "fits_get_hdrpos", _wrap_fits_get_hdrpos, 1 },
	 { "fits_get_hdrspace", _wrap_fits_get_hdrspace, 1 },
	 { "fits_file_mode", _wrap_fits_file_mode, 1 },
	 { "fits_file_name", _wrap_fits_file_name, 1 },
	 { "fits_delete_file", _wrap_fits_delete_file, 1 },
	 { "fits_close_file", _wrap_fits_close_file, 1 },
	 { "fits_open_member", _wrap_fits_open_member, 1 },
	 { "fits_open_group", _wrap_fits_open_group, 1 },
	 { "fits_create_template", _wrap_fits_create_template, 1 },
	 { "fits_create_file", _wrap_fits_create_file, 1 },
	 { "fits_reopen_file", _wrap_fits_reopen_file, 1 },
	 { "fits_open_file", _wrap_fits_open_file, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void,initpcfitsio)() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 import_libnumarray();
import_libnumeric();
	 m = Py_InitModule("pcfitsio", pcfitsioMethods);
	 d = PyModule_GetDict(m);
/*
 * These are the pointer type-equivalency mappings. 
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("_signed_long","_long",0);
	 SWIG_RegisterMapping("_long","_unsigned_long",0);
	 SWIG_RegisterMapping("_long","_signed_long",0);
	 SWIG_RegisterMapping("_unsigned_long","_long",0);
	 SWIG_RegisterMapping("_signed_int","_int",0);
	 SWIG_RegisterMapping("_unsigned_short","_short",0);
	 SWIG_RegisterMapping("_signed_short","_short",0);
	 SWIG_RegisterMapping("_unsigned_int","_int",0);
	 SWIG_RegisterMapping("_short","_unsigned_short",0);
	 SWIG_RegisterMapping("_short","_signed_short",0);
	 SWIG_RegisterMapping("_int","_unsigned_int",0);
	 SWIG_RegisterMapping("_int","_signed_int",0);
}
