NGAS Quick-Installation Guide
=============================

Installing NGAS is very simple and yet flexible. This quick-guide just covers
the most standard installation on a stand-alone server. The installation routine
covers a number of different scenarios, including test installations on the
Amazon EC2 cloud.
It is also possible to install all the OS packages required for NGAS, but this
is currently limited to RedHat, CentOS, Ubuntu, Debian, Suse and Mac OSX based 
installations and, except for Mac OSX, requires sudo access to the server.
The Mac OSX installation supports both homebrew and MacPorts.

Pre-requisites:
---------------
In order to use the installation procedure you will need some version of python
running on some (not the NGAS server) machine. Recommended version is one of the 
2.7 series.
If you are an advanced python user, you may already have a virtual environment
setup. If this is the case you can either just enable your default virtualenv, or
create a new one for this installation. If you are even more advanced and have
the fabric and boto modules installed already, you have all that's required and
can skip the rest of this section.

0) look at the output of python -V:

> python -V
Python 2.7

if it returns Python 2.7 you are fine.

1) check whether you've got virtualenv installed already:

> which virtualenv
/usr/bin/virtualenv

If it is not installed you can execute the following:

> wget --no-check-certificate -q https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.tar.gz
> tar -xvzf virtualenv-1.10.tar.gz
> cd virtualenv-1.10; python virtualenv.py .v_ngasdeploy

If virtualenv is installed already, create a virtual environment in a directory
of your choice, e.g.:

> virtualenv -p python .v_ngasdeploy

3) activate the virtual environment:

> source .v_ngasdeploy/bin/activate

4) install fabric and boto:

> pip install fabric
> pip install boto

NOTE: This will install fabric and boto into the virtualenv activated before and not
clutter up anything else.

5) In order to be able to execute the NGAS installation on a remote host you will need
to be able to connect to the target host through ssh. Thus try to connect to that host:

> ssh billiythekid@whatever.host

If you can login, either with or without password, you are ready to go.


Installation of NGAS:
---------------------

NOTE: all of the following commands assume that you are in the machine_setup
directory of the NGAS source tree, i.e.

$ cd ngas_rt/machine_setup

The directory ngas_rt might be called different in your case.

The installation of the NGAS software is using the fabric framework, allowing the
whole provisioning of the server and the required setup steps locally or on
remote hosts. The deployment tasks and functions are all written in Python and bash.

There are three main installation scenarios:
1) user_deploy: full user space installation, but if system dependencies are missing
                this won't succeed. NGAS does not require anything exotic, thus please
                try.

2) operations_deploy: this will install everything on a host where you have sudo access
                      with some special user (e.g. root). This will also install a ngas
                      user, which will subsequently be used to install and run the software.
                      
3) test_deploy: this will start-up an EC2 instance and install the software just like 
                operations_deploy. Mainly used for testing, but could also be used for
                production systems on AWS.

All that's required at this point is to run the fab command:

$ fab --hosts=whatever.host --user=billythekid user_deploy

where you have to replace whatever.host and billythekid with the hostname and user
name on that host where you want to install the software.


Support for specific installation situations:
---------------------------------------------
If you are running as user root (for a sudo user see below) you can use the command:

$ fab operations_deploy:standalone=1

or

$ fab operations_deploy

depending on whether you do have access to the internet or not, respectively. This is all what's required really.

To start and stop the server you can then use either the ngamsDaemon if you are logged in as ngas.

$ ngamsDaemon start

If you are logged in as root you can also use

service ngamsServer start

the init script is actually using the ngamsDaemon as well, thus those two things are really equivalent.


If you want to install the server under a different, existing user, you can run the installation of the
required system packages independently from the rest:

suppose <auth_user> is a user with full sudo access on the <target-machine>. Then you can run

fab -u <auth-user> -H<target-machine> system_install

and then install the NGAS software to another <target_user> like:

fab -u <target_user> -H <target-machine> user_deploy:standalone=1

Note that all this can be done using a third machine and user where you have unpacked the tar
and which has access to the network where the <target-machine> is.

Note that it is NOT recommended to perform either the installation or the actual running of the system
as root anywhere and this should really be avoided. The NGAS software does NOT require root or
even sudo permissions anywhere and the installation only requires it for resolving those few system
dependencies and all this can easily be done through sudo.


More options:
-------------

The installation routine is very modular and flexible. The above description is only scratching
the surface. To get a flavor you can change to the directory where you have unpacked the tar file
and issue the command:

$ fab --list

This will produce the following output:
===

Fabric file for installing NGAS servers

Test deployment on EC2 is simple as it only runs on one server

fab test_deploy

The tasks can be used individually and thus allow installations in very
diverse situations.

For a local installation under a normal user without sudo access

fab -u `whoami` -H <IP address> user_deploy

Available commands:

    archiveSource         Archive the NGAS source package on a NGAS server
    assign_ddns           This task installs the noip ddns client to the specified host.
    check_command         Check existence of command remotely
    check_python          Check for the existence of correct version of python
    check_ssh             Check availability of SSH on HOST
    check_user            Task checking existence of user
    cleanup_tmp           Task to cleanup temporary files left-over from an installation.
    connect
    create_key_pair       Create the AWS_KEY if it does not exist already and copies it into ~/.ssh
    get_info              Show login and termination info
    get_instance_id       Tasks retrieves the instance_id of the current instance internally.
    get_linux_flavor      Obtain and set the env variable linux_flavor
    git_clone_tar         Clones the repository into /tmp and packs it into a tar file
    init_deploy           Install the NGAS init script for an operational deployment
    install               Install NGAS users and NGAS software on existing machine.
    install_homebrew      Task to install homebrew on Mac OSX.
    install_user_profile  Put the activation of the virtualenv into the login profile of the user
    list_instances
    ngas_buildout         Perform just the buildout and virtualenv config
    ngas_full_buildout    Perform the full install and buildout
    ngas_minimal_tar      This function packs the minimal required parts of the NGAS source tree
    operations_deploy     ** MAIN TASK **: Deploy the full NGAS operational environment.
    pkg_mgr_ensure        Checks if either brew or port is installed. If none is it installs brew
    postfix_config        Setup the e-mail system for the NGAS
    print_env             Task prints the current fabric environment variables.
    python_setup          Ensure that there is the right version of python available
    set_env
    system_check          Check for existence of system level packages
    system_install        Perform the system installation part.
    terminate             Task to terminate the boto instances
    test_deploy           ** MAIN TASK **: Deploy the full NGAS EC2 test environment.
    test_env              Configure the test environment on EC2
    test_status           Execute the STATUS command against a running NGAS server
    uninstall             Uninstall the NGAS software
    upgrade               Upgrade the NGAS software on a target host using rsync.
    user_deploy           Deploy the system as a normal user without sudo access
    user_setup            setup ngas users.
    virtualenv_setup      setup virtualenv with the detected or newly installed python
    whatsmyip             Returns the external IP address of the host running fab.

===

MAC OSX specific installation notes:
------------------------------------
Please look up the special document in the doc folder.

